{% if shape.needs_module_alias or shape.needs_core_alias %}{% if shape.needs_module_alias %}private alias {{ service.module_alias }} = {{ service.module_name }}
{% endif %}{% if shape.needs_core_alias %}private alias Core = Amazonite::Core
{% endif %}
{% endif %}module {{ service.module_name }}
  class {{ shape.name }}{% for parameter in shape.parameters %}
    property {{ parameter.snake_case_name }} : {{ parameter.type }}{% endfor %}

    def initialize{% if shape.has_parameters %}({% for parameter in shape.parameters %}
      @{{ parameter.snake_case_name }} : {{ parameter.type }}{% if parameter.is_optional %} = nil{% endif %}{% if loop.revindex0 != 0 %},{% endif %}{% endfor %}
    ){% endif %}
    end

    def initialize(node : XML::Node){% if shape.needs_values %}
      values = {} of Symbol => String{% endif %}{% for parameter in shape.list_parameters %}
      {% if not parameter.is_optional %}@{% endif %}{{ parameter.snake_case_name }} = [] of {{ parameter.underlying_type }}{% endfor %}{% for parameter in shape.map_parameters %}
      {% if not parameter.is_optional %}@{% endif %}{{ parameter.snake_case_name }} = {} of {{ parameter.key_type }} => {{ parameter.value_type }}{% endfor %}
      node.children.each do |n|
        case n.name{% for parameter in shape.parameters %}
        when "{{ parameter.name }}"{% if parameter.is_map %}
          {{ parameter.key_xml_converter }}
          {{ parameter.value_xml_converter }}
          {{ parameter.snake_case_name }}[key] = value{% else %}{{ parameter.name_spacing }} then {{ parameter.xml_converter }}{% endif %}{% endfor %}
        end
      end{% if shape.has_assigned %}
{% endif %}
{% for parameter in shape.assigned_parameters %}      @{{ parameter.snake_case_name }} = {{ parameter.value_converter }}
{% endfor %}    end
  end
end
