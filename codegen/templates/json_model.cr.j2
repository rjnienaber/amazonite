{% if shape.needs_module_alias or shape.needs_core_alias %}{% if shape.needs_module_alias %}private alias {{ service.module_alias }} = {{ service.module_name }}
{% endif %}{% if shape.needs_core_alias %}private alias Core = Amazonite::Core
{% endif %}
{% endif %}module {{ service.module_name }}
  class {{ shape.name }}
    include JSON::Serializable
{% for parameter in shape.parameters %}
    @[JSON::Field(key: "{{ parameter.name }}"{% if parameter.has_converter %}, converter: {{ parameter.converter }}{% endif %})]
    property {{ parameter.snake_case_name }} : {{ parameter.type }}
{% endfor %}
    def initialize{% if shape.has_parameters %}({% for parameter in shape.parameters %}
      @{{ parameter.snake_case_name }} : {{ parameter.type }}{% if parameter.is_optional %} = nil{% endif %}{% if loop.revindex0 != 0 %},{% endif %}{% endfor %}
    ){% endif %}
    end
  end
end