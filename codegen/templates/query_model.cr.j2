{% if shape.needs_module_alias or shape.needs_core_alias %}{% if shape.needs_module_alias %}private alias {{ service.module_alias }} = {{ service.module_name }}
{% endif %}{% if shape.needs_core_alias %}private alias Core = Amazonite::Core
{% endif %}
{% endif %}module {{ service.module_name }}
  class {{ shape.name }}{% for member in shape.members %}
    property {{ member.snake_case_name }} : {{ member.type }}
{% endfor %}
    def initialize{% if shape.has_parameters %}({% for parameter in shape.parameters %}
      @{{ parameter.name }} : {{ parameter.type }}{% if parameter.is_optional %} = nil{% endif %}{% if loop.revindex0 != 0 %},{% endif %}{% endfor %}
    ){% endif %}
    end

    def initialize(node : XML::Node)
      node.children.each do |n|
        case n.name{% for member in shape.members %}
        when "{{ member.name }}" then self.{{ member.snake_case_name }} = n.children[0].to_s
{% endfor %}        end
      end
    end
  end
end